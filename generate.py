"""
A minimal generating tool under MIT license for ninja, makefile, or shell scripts.
Written by TheVeryDarkness, 1853308@tongji.edu.cn on Github.
"""
import datetime
from ninja_syntax import Writer
from scan import dependency, modulesDependency, depsDict, modulesBiDict


def generate_ninja(filename: str, modulesToBePreCompiledByEachSource: dict[str, modulesDependency]):
    with open(filename, "w") as fout:
        time = datetime.datetime.now()
        out = Writer(fout)
        out.comment("Generated by umake on {}.".format(time))
        out.variable("root", ".")
        out.variable("builddir", "build")
        out.variable("cxx", r"clang++ -cc1")
        if 1:
            out.variable("standard", "-std=c++20")
            out.variable("reference", "")
            out.variable("module", "-fmodules")
            out.variable("moduleOut", "-o")
            out.variable('objOut', '-o')
            out.variable('interface', '-emit-module')
        else:
            out.variable("standard", "/std:c++20")
            out.variable("reference", "/reference")
            out.variable("module", "/experimental:module")
            out.variable("moduleOut", "/ifcOutput")
            out.variable('objOut', '/Fo')
            out.variable('interface', '/interface')
        out.rule(
            "pcm", "$cxx $module $interface $in $moduleOut $out.ifc $objOut $out")
        out.rule("cxx", "$cxx $module $in $objOut $out")
        modules = set()
        for source, modulesToBePreCompiled in modulesToBePreCompiledByEachSource.items():
            modules = modules.union(modulesToBePreCompiled.module)
        for moduleToBePreCompiled in modules:
            out.build(modulesBiDict[moduleToBePreCompiled]+".obj",
                      "pcm", [modulesBiDict[moduleToBePreCompiled]])
